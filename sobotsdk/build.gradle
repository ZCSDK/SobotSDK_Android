apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    provided 'com.squareup.okhttp3:okhttp:3.7.0'
    provided 'com.android.support:support-v4:25.3.1'
    provided 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    provided 'com.github.bumptech.glide:glide:3.7.0'
    provided 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.sobot.chat:sobotsupport-glidev4:1.0.1'
}

//第 2 步：应用插件,下面两句话是应用插件
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

/*
 * 第 3 步: 指定 POM 详细信息
 * 在上传库时，Bintray 插件会寻找 POM 文件。
 * 即使 Maven 插件为你生成了它，你也应该自
 * 己指定 groupId 标签和 version 标签的值。
 * 要这样做，请使用 gradle 文件中的group 和version 的变量。
*/

/*
 * 如果你对 Maven 很熟悉，想知道为什么我们没
 * 有指定 artifactId 标签的值。这是因为默认
 * 情况下， Maven 插件将你的库的名称作为了 artifactId
 */

// 唯一包名，比如compile 'com.sobot.chat:sobotsdk:2.1.0'中的com.sobot.chat就是这里配置的。
group = 'com.sobot.chat'
// 项目引用的版本号，比如compile 'sobot.com:demo:1.0.0'中的1.0.0就是这里配置的。
version = '2.4.0'
// 定义两个链接，下面会用到。
def siteUrl = 'https://github.com/ZCSDK/SobotSDK_Android.git' // 项目在github上的主页
def gitUrl = 'git@github.com:ZCSDK/SobotSDK_Android.git' // Git仓库的url地址

/*
 * 第 4 步: 生成源 JAR （需要手动完成）
 * 为了遵守 Maven 标准，你的库也应该有一个包含了库
 * 的源文件的 JAR 文件。 为了生成 JAR 文件，需要创
 * 生成jar包的task
 */
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

/*
 * 第 5 步: 生成 Javadoc JAR （需要手动完成）
 * 我们同样推荐，在你的库里有一个包含 Javadocs 的 JAR 文件。
 * 因为目前你还没有任何 Javadocs，需要创建一个新的 Javadoc 任务，
 * 生成jarDoc的task，不需要修改。
 */
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}

/*
 *  （需要手动完成）
 * 下一步，要从 Javadocs 生成 JAR，需要创建 Jar 任务，
 * 生成javaDoc的jar，不需要修改。
 * 为了确保在 javadocJar 任务只在 javadoc 任务完
 * 成后才开始，需要添加下面的代码片段，它使用了 dependsOn 方法来决定任务的顺序：
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/*
 * 第 6 步: 引入生成的 JAR 文件()
 * 为了把源和 Javadoc JAR 文件导入到 artifacts 的列表里，
 * 你应该把他们的任务的名字添加到 configuration 里，
 * 称为 archives，artifacts 列表将被上传到 Maven 仓库。 使用下面的代码片段来完成:
 */
artifacts {
    archives javadocJar
    archives sourcesJar
}

/*
 * 第 7 步: 运行任务
 * 现在是运行我们在前几步里创建的任务的时候了。
 */

install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'aar'
                // 项目描述，复制我的话，这里需要修改。
                name 'demo For Android'// 可选，项目名称。
                description 'The Android build the framework of the Http server.'// 可选，项目描述。
                url siteUrl // 项目主页，这里是引用上面定义好。

                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id 'wangshuai' // 开发者的id。
                        name 'wangshuai' // 开发者名字。
                        email 'wangxingshuai@vip.qq.com' // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = "SobotSDKLib"  // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
        name = "sobotsdk"  // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
        userOrg = 'sobot-wangshuai' // Bintray的用户名
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
    }
}

/*
 * 以上  手动task任务完成以后，
 * 上传项目到Jcenter
 * 准备工作都做完啦，最后一步就是上传操作了，点击AndroidStudio底部的Terminal，观察下Terminal显示的路径是否是你当前项目的root。
 * 这里如果你系统配置了gradle的用户环境，输入gradle install，如果没有配置gradle用户环境，输入gradlew install，如果没有问题，最
 * 终你会看到BUILD SUCCESSFUL。如果你看到了生成javadoc时编译不过，那么要看下在gradle中task javadoc下有没有failOnError false这句
 * 话，在刚才编写gradle时提示过了。如果加了这句而你的javadoc写的不规范会有警告，你不用鸟它。最后一步，运行gradle install后看到
 * BUILD SUCCESSFUL后，再输入上传命令gradle bintrayUpload，等一分钟左右就执行完了，会提示SUCCESSFUL。
 * 浏览器https://bintray.com/后会看到你的项目。
*/